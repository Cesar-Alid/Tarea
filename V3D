import math

class V3D:

    def __init__(self,x,y,z):
        self.x=x
        self.y=y
        self.z=z

    def __add__(self,other):
        return V3D(self.x + other.x, self.y + other.y, self.z + other.z)

    def __sub__(self,other):
        return V3D(self.x-other.x,self.y-other.y,self.z-other.z)

    def __mul__(self, scalar):
        return V3D(self.x*scalar,self.y*scalar,self.z*scalar)
    
    def dividir(self, scalar):
        return V3D(self.x/scalar,self.y/scalar,self.z/scalar)

    def dot_product(self,other):
        return self.x*other.x + self.y*other.y + self.z*other.z
    
    def cross_product(self,other):
        return (self.y*other.z - self.z*other.y)-(self.x*other.z - self.z-other.x)+(self.x*other.y - self.y*other.x)

    def norma(self):
        return math.sqrt((self.x*self.x + self.y*self.y + self.z*self.z))
    
    def angulo(self,other):
        u=math.sqrt((self.x*self.x + self.y*self.y + self.z*self.z))
        v=math.sqrt((other.x*other.x + other.y*other.y + other.z*other.z))
        w=self.x*other.x + self.y*other.y + self.z*other.z
        return math.acos(w/(u*v))
    
    def trip_product(self,other,andother):
        return (self.x*other.y*andother.z + other.x*andother.y*self.z + andother.x*self.y*other.x)-(self.z*other.y*andother.x + other.z*andother.y*self.x + andother.z*self.y*other.x)
        
    def proj_in_yx(self):
        return V3D(self.x,self.y,0)
    
    def proj_in_zy(self):
        return V3D(0,self.y,self.z)
    
    def proj_in_xz(self):
        return V3D(self.x,0,self.z)
    
    def proj_in_x(self):
        return V3D(self.x,0,0)
    
    def proj_in_y(self):
        return V3D(0,self.y,0)
    
    def proj_in_z(self):
        return V3D(0,0,self.z)
    
    def __repr__(self):
        return f"({self.x},{self.y},{self.z})"
